apply plugin: 'com.android.application'

android {
    signingConfigs {
        release {
            //加载资源
            Properties properties = new Properties()
            InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
            properties.load(inputStream)

            //读取文件
            def sdkDir = properties.getProperty('keystore.path')
            storeFile file(sdkDir)

            //读取字段
            def key_keyAlias = properties.getProperty('keystore.alias')
            def key_keyPassword = properties.getProperty('keystore.password')
            def key_storePassword = properties.getProperty('keystore.alias_password')

            keyAlias key_keyAlias
            keyPassword key_keyPassword
            storePassword key_storePassword
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.lxl.client"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            zipAlignEnabled false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    signingConfigs {
        releaseConfig {
            keyAlias 'SignDemo'
            keyPassword '123456'
            storeFile file('E:\\project\\androidStudio\\signAPK\\SignDemo.jks')
            storePassword '123456'
        }
    }

    //自定义apk名称含版本号信息
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "NanoVoice_${variant.versionCode}-${variant.versionName}-${releaseTime()}.apk"
        }
    }

    repositories {
        flatDir {    //添加在android()里面
            dirs 'libs'
        }
    }
}

//获取编译时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    //implementation fileTree(include: ['*.jar','*.aar'] , dir: 'libs')
    //implementation(name:'NanoVoice-v1.0', ext:'aar')
    implementation project(':NanoVoice')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
